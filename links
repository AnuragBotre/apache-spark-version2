https://stackoverflow.com/questions/32517976/how-to-get-data-from-a-specific-partition-in-spark-rdd
val zeroth = rdd
  // If partition number is not zero ignore data
  .mapPartitionsWithIndex((idx, iter) => if (idx == 0) iter else Iterator())

https://stackoverflow.com/questions/35127720/what-is-the-difference-between-spark-checkpoint-and-persist-to-a-disk
-- Caching vs Checkpointing
http://www.lifeisafile.com/Apache-Spark-Caching-Vs-Checkpointing/
-- Caching vs Checkpointing
https://medium.com/@adrianchang/apache-spark-checkpointing-ebd2ec065371
-- Caching vs Checkpointing

https://stackoverflow.com/questions/35127720/what-is-the-difference-between-spark-checkpoint-and-persist-to-a-disk
https://github.com/JerryLead/SparkInternals/blob/master/markdown/english/6-CacheAndCheckpoint.md
https://intellipaat.com/community/7571/what-is-the-difference-between-spark-checkpoint-and-persist-to-a-disk
-
 Persist

     Persisting or caching with StorageLevel.DISK_ONLY cause the generation of RDD to be computed
     and stored in a location such that subsequent use of that RDD will not go beyond
     that points in recomputing the linage.
     After persist is called, Spark still remembers the lineage of the RDD even though it
     doesn't call it.
     Secondly, after the application terminates, the cache is cleared or file destroyed

 Checkpointing

     Checkpointing stores the rdd physically to hdfs and destroys the lineage that created it.
     The checkpoint file won't be deleted even after the Spark application terminated.
     Checkpoint files can be used in subsequent job run or driver program
     Checkpointing an RDD causes double computation because the operation will first call a
     cache before doing the actual job of computing and writing to the checkpoint directory.
-

https://github.com/Red5/red5-server
    red5-server - Red5 server core

    TravisCI Maven Central PRs Welcome

    Red5 is an Open Source Flash Server written in Java that supports:

        Streaming Video (FLV, F4V, MP4, 3GP)
        Streaming Audio (MP3, F4A, M4A, AAC)
        Recording Client Streams (FLV and AVC+AAC in FLV container)
        Shared Objects
        Live Stream Publishing
        Remoting
        Protocols: RTMP, RTMPT, RTMPS, and RTMPE

https://www.waitingforcode.com/apache-spark/apache-spark-data-bigger-than-memory/read

https://g1thubhub.github.io/spark-memory.html
-- Must read

https://databricks.com/blog/2018/07/19/simplify-streaming-stock-data-analysis-using-databricks-delta.html
https://databricks.com/blog/2019/06/18/simplifying-streaming-stock-analysis-using-delta-lake-and-apache-spark-on-demand-webinar-and-faq-now-available.html

https://sujithjay.com/spark/with-yarn

https://www.justanalytics.com/blog/technical-know-how/tuning-resource-allocation-in-apache-spark

https://spoddutur.github.io/spark-notes/distribution_of_executors_cores_and_memory_for_spark_application.html

https://stackoverflow.com/questions/58380969/tuning-spark-number-of-executors-per-node-when-cores-available-are-uneven

Spark with Yarn Cluster.
https://subscription.packtpub.com/book/big_data_and_business_intelligence/9781787127265/1/ch01lvl1sec16/deploying-spark-on-a-cluster-with-yarn


https://blog.cloudera.com/how-to-tune-your-apache-spark-jobs-part-2/
https://stackoverflow.com/questions/30031214/using-spark-submit-what-is-the-behavior-of-the-total-executor-cores-option